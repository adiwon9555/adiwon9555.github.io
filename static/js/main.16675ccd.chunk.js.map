{"version":3,"sources":["logo.svg","components/TaskCreator/taskCreator.jsx","components/TaskViewer/taskViewer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TaskCreator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startDate","Date","handleChange","bind","assertThisInitialized","date","setState","e","preventDefault","data","taskName","refs","value","taskDes","taskDate","getTime","addTask","react_default","a","createElement","className","onSubmit","style","marginTop","fontSize","autoFocus","type","id","placeholder","ref","required","es","selected","onChange","showTimeSelect","minDate","timeIntervals","dateFormat","timeCaption","Component","TaskViewer","tasks","onClick","getUpcomingTasks","getAllTasks","float","map","task","i","key","toLocaleString","App","push","stasks","JSON","stringify","localStorage","setItem","x","document","getElementById","setTimeout","replace","getItem","parse","sort","b","filter","t","TaskCreator_taskCreator","assign","TaskViewer_taskViewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16675ccd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './taskCreator.css'\r\n// import TimePicker from 'react-time-picker';\r\n// import TimePicker from 'react-time-picker/dist/entry.nostyle';\r\nimport DatePicker from \"react-datepicker\";\r\n// import TimePicker from 'rc-time-picker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass TaskCreator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startDate: new Date(),\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(date) {\r\n        this.setState({\r\n            startDate: date\r\n        });\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        var data = {\r\n            taskName: this.refs.taskName.value,\r\n            taskDes: this.refs.taskDes.value,\r\n            taskDate: this.state.startDate.getTime()\r\n        }\r\n        this.props.addTask(data);\r\n        this.refs.taskName.value = '';\r\n        this.refs.taskDes.value = '';\r\n        this.setState({\r\n            startDate: new Date()\r\n        });\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        // const { activeChannel } = this.props;\r\n        return (\r\n\r\n            <div className=\"a\">\r\n                <h1 className=\"text-center\">Task Creator</h1>\r\n                <form onSubmit={this.onSubmit.bind(this)} style={{ marginTop: \"7%\", fontSize: \"160%\" }}>\r\n                    <div className=\"form-group\">\r\n                        <label >Task Name</label>\r\n                        <input autoFocus type=\"text\" className=\"form-control\" id=\"name\" placeholder=\"Enter Task\" ref=\"taskName\" required />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label >Task Description</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"Description\" placeholder=\"Enter Description\" ref=\"taskDes\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label >Set Date-Time</label>\r\n                        <div>\r\n                            <DatePicker\r\n                                selected={this.state.startDate}\r\n                                onChange={this.handleChange}\r\n                                showTimeSelect\r\n                                minDate={new Date()}\r\n                                // timeFormat=\"HH:mm\"\r\n                                timeIntervals={1}\r\n                                dateFormat=\"MMM d, yyyy h:mm aa\"\r\n                                timeCaption=\"Time\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                        <button type=\"submit\" className=\"btn btn-primary btn-lg\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTaskCreator.propTypes = {\r\n    // messages: PropTypes.array.isRequired,\r\n    addTask: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TaskCreator;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './taskViewer.css'\r\n\r\nclass TaskViewer extends Component {\r\n\r\n    render() {\r\n        const { tasks } = this.props;\r\n        \r\n        return (\r\n            <div>\r\n                <div style={{ marginTop: \"5%\" }}>\r\n                    <button className=\"btn btn-warning \" onClick={this.props.getUpcomingTasks.bind(this)}>Upcoming</button>\r\n                    <button className=\"btn btn-success\" onClick={this.props.getAllTasks.bind(this)} style={{ float: \"right\" }}>All</button>\r\n\r\n                </div>\r\n                <ul className=\"list-group\" style={{marginTop:\"5%\"}}>\r\n                    {tasks.map((task,i) => {\r\n                         return <li key={i} className=\"list-group-item\" >\r\n                            <div>\r\n                                <strong className=\"tName\">{task.taskName}</strong>\r\n                                <i className=\"timestamp\">{new Date(task.taskDate).toLocaleString()}</i>\r\n                            </div>\r\n                            <div className=\"des\">\r\n                                {task.taskDes}\r\n                            </div>\r\n                        </li>\r\n                    })\r\n                    }\r\n\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTaskViewer.propTypes = {\r\n    // tasks: PropTypes.array.isRequired,\r\n    getAllTasks: PropTypes.func.isRequired,\r\n    getUpcomingTasks: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TaskViewer;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TaskCreator from './components/TaskCreator/taskCreator.jsx'\nimport TaskViewer from './components/TaskViewer/taskViewer.jsx'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: []\n    };\n  }\n  componentDidMount() {\n\n    this.getUpcomingTasks()\n\n  }\n  addTask(data) {\n    var tasks = this.state.tasks;\n    tasks.push(data)\n    var stasks = JSON.stringify(tasks);\n    localStorage.setItem('tasks', stasks);\n    var x = document.getElementById(\"snackbar\");\n\n    // Add the \"show\" class to DIV\n    x.className = \"show\";\n\n    // After 3 seconds, remove the show class from DIV\n    setTimeout(function () { x.className = x.className.replace(\"show\", \"\"); }, 2000);\n    this.getUpcomingTasks()\n  }\n  getAllTasks() {\n    var stasks = localStorage.getItem('tasks');\n    if (stasks != null) {\n      var tasks = JSON.parse(stasks)\n      tasks.sort(function (a, b) { return a.taskDate - b.taskDate });\n      this.setState({\n        tasks\n      })\n    }\n\n  }\n  getUpcomingTasks() {\n    var stasks = localStorage.getItem('tasks');\n    if (stasks != null) {\n      var tasks = JSON.parse(stasks)\n      tasks.sort(function (a, b) { return a.taskDate - b.taskDate });\n      tasks = tasks.filter((t, i) => {\n        if (i < 3) {\n          return true\n        } else {\n          return false\n        }\n      })\n      this.setState({\n        tasks\n      })\n    }\n\n  }\n  render() {\n    return (\n\n      <div className='container'>\n        <div className='row'>\n          <div className=\"col-xs-9 border\">\n            <TaskCreator {...this.state}\n              addTask={this.addTask.bind(this)}\n            />\n          </div>\n          <div className=\"col-xs-3\">\n            <TaskViewer\n              {...this.state}\n              getAllTasks={this.getAllTasks.bind(this)}\n              getUpcomingTasks={this.getUpcomingTasks.bind(this)}\n            />\n\n          </div>\n        </div>\n        <div id=\"snackbar\">Task Successfully added</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}